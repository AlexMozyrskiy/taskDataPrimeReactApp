{"version":3,"sources":["UI/HomePage/HomePage.jsx","BLL/firstTextArea/selectors.js","BLL/thirdTextArea/selectors.js","BLL/secondTextArea/selectors.js","BLL/firstTextArea/actionTypes.js","BLL/thirdTextArea/actionTypes.js","BLL/secondTextArea/actionTypes.js","helpers/setCaretToStartOfLine/setCaretToStart.js","helpers/setCaretToEndOfLine/setCaretToEnd.js","helpers/focusOnElement/focusOnElement.js","UI/HomePage/HomePageContainer.jsx","BLL/firstTextArea/actionCreators.js","BLL/secondTextArea/actionCreators.js","BLL/thirdTextArea/actionCreators.js","UI/NotFoundPage/NotFoundPage.jsx","App.js","reportWebVitals.js","BLL/firstTextArea/reducer.js","BLL/secondTextArea/reducer.js","BLL/thirdTextArea/reducer.js","BLL/redux_store/redux-store.js","index.js"],"names":["HomePage","props","className","cn","isTextareaInFirstDivActive","style","height","taskHeight","textareaHeight","suppressContentEditableWarning","contentEditable","color","colorForFirstTextArea","onClick","e","onFirstTextareaClick","onInput","onFirstTextareaChange","isPlaceHolderInFirstDivActive","taskPlaceHolder","textInFirstDiv","isTextAreaInSecondDivActive","isTextAreaInThirdDivActive","isPlaceHolderInThirdDivActive","onThirdTextareaChange","notePlaceHolder","textInThirdDiv","defaultValue","getIsTextAreaInFirstDivActiveSelector","state","textAreaInFirstDiv","isTextAreaInFirstDivActive","getIsPlaceHolderInFirstDivActiveSelector","getTextInFirstDivSelector","getIsTextAreaInThirdDivActiveSelector","textAreaInThirdDiv","getiIsPlaceHolderInThirdDivActiveSelector","getTextInThirdDivSelector","getIsTextAreaInSecondDivActiveSelector","textAreaInSecondDiv","TOOGLE_IS_TEXTAREA_IN_FIRST_DIV_ACTIVE","IS_PLACEHOLDER_IN_FIRST_DIV_ACTIVE","TEXT_IN_FIRST_DIV","TOOGLE_IS_TEXTAREA_IN_THIRD_DIV_ACTIVE","IS_PLACEHOLDER_IN_THIRD_DIV_ACTIVE","TEXT_IN_THIRD_DIV","TOOGLE_IS_TEXTAREA_IN_SECOND_DIV_ACTIVE","setCaretToStart","el","range","Range","setStart","setEnd","window","getSelection","removeAllRanges","addRange","setCaretToEnd","selectNodeContents","collapse","focusOnElement","setCaretToStartProp","document","querySelector","focus","mapDispatchToProps","toogleIsTextAreaInFirstDivActive","boolVar","type","toogleIsPlaceHolderInFirstDivActive","setTextInFirstDivInState","toogleIsTextAreaInSecondDivActive","toogleIsTextAreaInThirdDivActive","toogleIsPlaceHolderInThirdDivActive","setTextInThirdDivInState","connect","useEffect","useState","firstTextAreaHeight","changeFirstTextAreaHeight","thirdTextAreaHeight","changeThirdTextAreaHeight","changeTaskHeight","placeHolderTextInFirstTextArea","placeHolderTextInThirdTextArea","changeTaskPlaceHolder","changeNotePlaceHolder","target","offsetHeight","newText","innerText","twoLastCharInNewText","length","newTextInArr","split","join","NotFoundPage","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","textAreaInFirstDivReducer","action","superState","textAreaInSecondDivReducer","textAreaInThirdDivReducer","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","basename","process","getElementById"],"mappings":"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","file":"static/js/main.47e8d00b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nconst HomePage = (props) => {\r\n    return (\r\n        <div className=\"page-wrapper\">\r\n            <div className={cn(\"task\", { \"task-notActive\": !props.isTextareaInFirstDivActive }, { \"task-active\": props.isTextareaInFirstDivActive })} style={{ height: props.taskHeight + 'px' }} >\r\n                <div className={cn(\"task__rhombus\", { \"task__rhombus-active\": props.isTextareaInFirstDivActive })}></div>           { /* Ромб который появлется с лева и потом прячется обратно за оверфлоу хидден */}\r\n                <div className={cn(\"task__square\", { \"task__square-notActive\": !props.isTextareaInFirstDivActive }, { \"task__square-active\": props.isTextareaInFirstDivActive })}></div>     {/* Квадрат, который появляется слева при активации формы */}\r\n\r\n                <div className={cn(\"task__textarea-wrapper\", { \"task__textarea-notActive\": !props.isTextareaInFirstDivActive }, { \"task__textarea-active\": props.isTextareaInFirstDivActive })}\r\n                    style={{ height: props.textareaHeight + 'px' }}\r\n                >\r\n\r\n                    <div\r\n                        suppressContentEditableWarning=\"true\"\r\n                        contentEditable=\"true\"\r\n                        style={{ color: props.colorForFirstTextArea() }}\r\n                        className=\"task__first-textarea\"\r\n                        onClick={(e) => props.onFirstTextareaClick(e)}\r\n                        onInput={(e) => props.onFirstTextareaChange(e)}\r\n                    >{props.isPlaceHolderInFirstDivActive ? props.taskPlaceHolder : props.textInFirstDiv}\r\n                    </div>\r\n\r\n                    {props.isTextAreaInSecondDivActive ? <div className=\"task__second-texarea\"><div className=\"task__two-slash-animation\"></div>// </div> : null}\r\n\r\n                    {\r\n                        props.isTextAreaInThirdDivActive\r\n                            ? <div\r\n                                suppressContentEditableWarning=\"true\"\r\n                                contentEditable=\"true\"\r\n                                style={{ color: props.isPlaceHolderInThirdDivActive ? \"#C5BAA4\" : \"#7F6233\" }}\r\n                                className=\"task__third-textarea\"\r\n                                // onClick={(e) => props.onFirstTextareaClick(e)}\r\n                                onInput={(e) => props.onThirdTextareaChange(e)}\r\n                            >{props.isPlaceHolderInThirdDivActive ? props.notePlaceHolder : props.textInThirdDiv}\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n                </div>\r\n\r\n                <div className={cn(\"task__calendar-and-select-wrapper\", { \"displayNone\": !props.isTextareaInFirstDivActive })}>\r\n                    <div className=\"task__calendar\"></div>\r\n                    <select defaultValue=\"1\">\r\n                        <option>No List</option>\r\n                        <option>List 1</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;\r\n","export const getIsTextAreaInFirstDivActiveSelector =  (state) => {\r\n    return state.textAreaInFirstDiv.isTextAreaInFirstDivActive;\r\n}\r\n\r\nexport const getIsPlaceHolderInFirstDivActiveSelector =  (state) => {\r\n    return state.textAreaInFirstDiv.isPlaceHolderInFirstDivActive;\r\n}\r\n\r\nexport const getTextInFirstDivSelector =  (state) => {\r\n    return state.textAreaInFirstDiv.textInFirstDiv;\r\n}","export const getIsTextAreaInThirdDivActiveSelector =  (state) => {\r\n    return state.textAreaInThirdDiv.isTextAreaInThirdDivActive;\r\n}\r\n\r\nexport const getiIsPlaceHolderInThirdDivActiveSelector =  (state) => {\r\n    return state.textAreaInThirdDiv.isPlaceHolderInThirdDivActive;\r\n}\r\n\r\nexport const getTextInThirdDivSelector =  (state) => {\r\n    return state.textAreaInThirdDiv.textInThirdDiv;\r\n}","export const getIsTextAreaInSecondDivActiveSelector =  (state) => {\r\n    return state.textAreaInSecondDiv.isTextAreaInSecondDivActive;\r\n}","export const TOOGLE_IS_TEXTAREA_IN_FIRST_DIV_ACTIVE = 'dataPrimeTestTask/textAreaInFirstDiv/TOOGLE_IS_TEXTAREA_IN_FIRST_DIV_ACTIVE';\r\nexport const IS_PLACEHOLDER_IN_FIRST_DIV_ACTIVE = 'dataPrimeTestTask/textAreaInFirstDiv/IS_PLACEHOLDER_IN_FIRST_DIV_ACTIVE';      // Плейсхолдер в первом диве(в котором юзер печатет таску)\r\nexport const TEXT_IN_FIRST_DIV = 'dataPrimeTestTask/textAreaInFirstDiv/TEXT_IN_FIRST_DIV';                                        // Текст печатуемый в первом диве(в котором юзер печатет таску)","export const TOOGLE_IS_TEXTAREA_IN_THIRD_DIV_ACTIVE = 'dataPrimeTestTask/textAreaInThirdDiv/TOOGLE_IS_TEXTAREA_IN_THIRD_DIV_ACTIVE';\r\nexport const IS_PLACEHOLDER_IN_THIRD_DIV_ACTIVE = 'dataPrimeTestTask/textAreaInThirdDiv/IS_PLACEHOLDER_IN_THIRD_DIV_ACTIVE';\r\nexport const TEXT_IN_THIRD_DIV = 'dataPrimeTestTask/textAreaInThirdDiv/TEXT_IN_THIRD_DIV';","export const TOOGLE_IS_TEXTAREA_IN_SECOND_DIV_ACTIVE = 'dataPrimeTestTask/textAreaInSecondDiv/TOOGLE_IS_TEXTAREA_IN_SECOND_DIV_ACTIVE';","// -------------------- Выставляет каретку в начало строки -----------------------\r\n/*\r\n    Параметр el - элемент html\r\n*/\r\nfunction setCaretToStart(el) {\r\n\r\n    // ----------- 1 Вариант -----------------------------\r\n    /*\r\n        Тут Мы высталяем курсор в начало строки, а если передать в range.collapse(false); каретка выставится в конец строки.\r\n        Важно применить window.getSelection().removeAllRanges();, чтобы каретка стерлась из места строки куда мы кликнули.\r\n    */\r\n    // let range = new Range();\r\n    // range.selectNodeContents(el);                   // создаем обеъкт range только из содержимого узла (без тегов)\r\n    // range.collapse(true);                           // Метод collapse объединяет граничные точки объекта Range. В качестве единственного аргумента принимает булево значение (true – для объединения в верхней точке(начало строки), false(конец строки) – в нижней). По умолчанию true.\r\n    // window.getSelection().removeAllRanges();        // удаляет переданный (все) объект Range из выделения.\r\n    // window.getSelection().addRange(range);          // Метод addRange принимает в качестве аргумента объект Range и добавляет его в выделение\r\n    // ----------- / 1 Вариант ----------------------------\r\n\r\n\r\n    // ----------- 2 Вариант ------------------------------\r\n    /*\r\n        Тут мы явно указываем слово которое надо выделить.\r\n        Важно применить window.getSelection().removeAllRanges();, чтобы каретка стерлась из места строки куда мы кликнули.\r\n    */\r\n    let range = new Range();\r\n\r\n    range.setStart(el, 0);      // выделить дапозон с нулевого слова\r\n    range.setEnd(el, 0);        // по нулевое слово\r\n    window.getSelection().removeAllRanges();\r\n\r\n    window.getSelection().addRange(range);    // применим этот диапазон к выделению документа\r\n    // ----------- / 2 Вариант ----------------------------\r\n}\r\n\r\nexport default setCaretToStart;\r\n// -------------------- / Выставляет каретку в начало строки ---------------------","// -------------------- Выставляет каретку в начало строки -----------------------\r\n/*\r\n    Параметр el - элемент html\r\n*/\r\nfunction setCaretToEnd(el) {\r\n\r\n    /*\r\n        Тут Мы высталяем курсор в начало строки, а если передать в range.collapse(false); каретка выставится в конец строки.\r\n        Важно применить window.getSelection().removeAllRanges();, чтобы каретка стерлась из места строки куда мы кликнули.\r\n    */\r\n    let range = new Range();\r\n    range.selectNodeContents(el);                   // создаем обеъкт range только из содержимого узла (без тегов)\r\n    range.collapse(false);                          // Метод collapse объединяет граничные точки объекта Range. В качестве единственного аргумента принимает булево значение (true – для объединения в верхней точке(начало строки), false(конец строки) – в нижней). По умолчанию true.\r\n    window.getSelection().removeAllRanges();        // удаляет переданный (все) объект Range из выделения.\r\n    window.getSelection().addRange(range);          // Метод addRange принимает в качестве аргумента объект Range и добавляет его в выделение\r\n}\r\n\r\nexport default setCaretToEnd;\r\n// -------------------- / Выставляет каретку в начало строки ---------------------","import setCaretToStart from \"../setCaretToStartOfLine/setCaretToStart\";\r\nimport setCaretToEnd from \"../setCaretToEndOfLine/setCaretToEnd\";\r\n\r\nfunction focusOnElement(className, setCaretToStartProp = true) {\r\n    const el = document.querySelector(\".\" + className);\r\n    el.focus();\r\n    setCaretToStartProp ? setCaretToStart(el) : setCaretToEnd(el);\r\n    \r\n}\r\n\r\nexport default focusOnElement;","import React, { useState, useEffect } from \"react\";\r\nimport HomePage from \"./HomePage\";\r\nimport {\r\n    getIsTextAreaInFirstDivActiveSelector, getIsPlaceHolderInFirstDivActiveSelector,\r\n    getTextInFirstDivSelector\r\n} from \"../../BLL/firstTextArea/selectors\";\r\nimport {\r\n    getIsTextAreaInThirdDivActiveSelector, getiIsPlaceHolderInThirdDivActiveSelector,\r\n    getTextInThirdDivSelector\r\n} from \"../../BLL/thirdTextArea/selectors\";\r\nimport { getIsTextAreaInSecondDivActiveSelector } from \"../../BLL/secondTextArea/selectors\";\r\nimport {\r\n    toogleIsTextAreaInFirstDivActive, toogleIsPlaceHolderInFirstDivActive,\r\n    setTextInFirstDivInState\r\n} from \"../../BLL/firstTextArea/actionCreators\";\r\nimport {\r\n    toogleIsTextAreaInThirdDivActive, toogleIsPlaceHolderInThirdDivActive,\r\n    setTextInThirdDivInState\r\n} from \"../../BLL/thirdTextArea/actionCreators\";\r\nimport { toogleIsTextAreaInSecondDivActive } from \"../../BLL/secondTextArea/actionCreators\";\r\nimport { connect } from \"react-redux\";\r\nimport setCaretToStart from \"../../helpers/setCaretToStartOfLine/setCaretToStart\";\r\nimport setCaretToEnd from \"../../helpers/setCaretToEndOfLine/setCaretToEnd\";\r\nimport focusOnElement from \"../../helpers/focusOnElement/focusOnElement\";\r\n\r\nconst HomePageContainer = (props) => {\r\n\r\n    useEffect(() => {\r\n        if (props.isTextAreaInThirdDivActive) {\r\n            focusOnElement(\"task__third-textarea\");             // сфокусируемся на третьей текстареи если пропс isTextAreaInThirdDivActive изменился на true, то есть такстарея в третьем диве стала активной\r\n        }\r\n    }, [props.isTextAreaInThirdDivActive]);\r\n\r\n    // ---------- useState -------------------------------------\r\n    let [firstTextAreaHeight, changeFirstTextAreaHeight] = useState(70);       // текущая высота текстареа, изначально получим ее при первом клике на текстарею, затем при изменении будем сравнивать прошлую высоту с нынешней и менять если не совпадут\r\n    let [thirdTextAreaHeight, changeThirdTextAreaHeight] = useState(70);\r\n    let [taskHeight, changeTaskHeight] = useState(100);             // высота основного враппера, бем менять в зависимости от высоты текстареи(scrollHeight), чтобы полоса прокрутки не появлялась\r\n\r\n    const placeHolderTextInFirstTextArea = \"Write a new task\";\r\n    const placeHolderTextInThirdTextArea = \"write note\";\r\n    let [taskPlaceHolder, changeTaskPlaceHolder] = useState(placeHolderTextInFirstTextArea);        // Плейсхолдер для первого дива (с таском который)\r\n    let [notePlaceHolder, changeNotePlaceHolder] = useState(placeHolderTextInThirdTextArea);        // Плейсхолдер для первого дива (с таском который)\r\n    // ---------- / useState -----------------------------------\r\n\r\n\r\n    // ------------ Функция при клике на первую текстарею -------------------------------------------\r\n    function onFirstTextareaClick(e) {                      // При клике на textArea\r\n        if (!props.isTextareaInFirstDivActive) {                      // Если она не активна\r\n            props.toogleIsTextAreaInFirstDivActive(true);   // сделаем ее активной\r\n            changeFirstTextAreaHeight(e.target.offsetHeight);    // запишем первоночальную высоту текстареи (когда 1 строка) в переменную в стейте\r\n            changeThirdTextAreaHeight(e.target.offsetHeight);    // запишем первоночальную высоту текстареи (когда 1 строка) в переменную в стейте\r\n            setCaretToStart(e.target);                      // функция хелпер, перемещающая каретку в началос строки\r\n        } else if (props.isTextareaInFirstDivActive && props.isPlaceHolderInFirstDivActive) {       // если она активна, но плейсхолдер еще есть\r\n            changeFirstTextAreaHeight(e.target.offsetHeight);    // запишем первоночальную высоту текстареи (когда 1 строка) в переменную в стейте\r\n            setCaretToStart(e.target);                      // функция хелпер, перемещающая каретку в начало строки\r\n        }\r\n    }\r\n    // ------------ / Функция при клике на первую текстарею -------------------------------------------\r\n\r\n\r\n    // ------------ Функция при вводе в первую текстарею символа -------------------------------------------\r\n    function onFirstTextareaChange(e) {             // При изменении в textArea в которой печатем таску (первая текстареа)\r\n        let newText = e.target.innerText;           // Для удобства помести текст печатуемый в текстареи в переменную\r\n        const twoLastCharInNewText = newText[newText.length - 2] + newText[newText.length - 1];      // два последних символа печатуемого текста. Чтобы отслеживать когда юзер введет \"//\" и добавлять новые дивы (текстареи)\r\n\r\n        if (props.isPlaceHolderInFirstDivActive) {              // если плейсхолдер активен \r\n            newText = e.target.innerText[0];         // возьмем из полученного текста первую букву, в противном случае у нас будет текст заканчиваться плейсхолдером\r\n            setCaretToEnd(e.target);                            // переместим каретку в конец строки\r\n            changeTaskPlaceHolder(\"\");                          // изменим значение плейсхолдера на пустую строку\r\n            props.toogleIsPlaceHolderInFirstDivActive(false);   // Изменим в стейте свойство показывающее активен ли плейсхолдер\r\n        } else {                                                // если плейсхолдер не активен\r\n            setCaretToEnd(e.target);                            // при печатании переместим каретку в конец строки\r\n        }\r\n\r\n        props.setTextInFirstDivInState(newText);     // изменим текст в стейте\r\n\r\n        if (e.target.offsetHeight > firstTextAreaHeight) {             // если новая высота текстареи больше предыдущей\r\n            changeFirstTextAreaHeight(e.target.offsetHeight);          // изменим текущую высоту в стейте, чтобы это условие выполнялось потом при дальнейшем изменении высоты, если юзер продолжит печатать и добавлять стороки\r\n            changeTaskHeight(taskHeight + 40);\r\n\r\n        } else if (e.target.offsetHeight < firstTextAreaHeight && e.target.offsetHeight != 0) {  // если новая высота текстареи меньше предыдущей и высота не равна 0 (будет тогда когда юзер сотрет все символы из строки)\r\n            changeFirstTextAreaHeight(e.target.offsetHeight);                                    // изменим текущую высоту в стейте, чтобы это условие выполнялось потом при дальнейшем изменении высоты, если юзер продолжит печатать и добавлять стороки\r\n            changeTaskHeight(taskHeight - 40);\r\n        } else if (e.target.offsetHeight === 0) {                   // если высота текстареи === 0 (юзер удалил все символы)\r\n            changeTaskPlaceHolder(placeHolderTextInFirstTextArea);              // изменим значение плейсхолдера на изначальное значение\r\n            props.toogleIsPlaceHolderInFirstDivActive(true);        // Изменим в стейте свойство показывающее активен ли плейсхолдер\r\n        }\r\n\r\n        if (twoLastCharInNewText === \"//\") {                                     // если два последних напечатнных символа === \"//\"\r\n            props.toogleIsTextAreaInSecondDivActive(true);                      // активируем второй див\r\n            let newTextInArr = newText.split('');                               // в массив введенную строку чтобы удалить последние смиволы \"//\" из первой текстареи\r\n            newTextInArr.length = newTextInArr.length - 2;                      // удаляем последние 2 символа\r\n            newText = newTextInArr.join('');                                    // соединяем обратно в строку\r\n            props.setTextInFirstDivInState(newText);                            // изменим текст в стейте\r\n\r\n            props.toogleIsTextAreaInThirdDivActive(true);                      // активируем второй див\r\n        }\r\n    }\r\n    // ------------ / Функция при вводе в первую текстарею символа -----------------------------------------\r\n\r\n\r\n    // ------------ Функция для определения цвета шрифта в первой текстареи --------------------------------\r\n\r\n    function colorForFirstTextArea() {                                             // для определения цвета шрифта для первой текстареи в зависимости от состояний в стейте\r\n        if (props.isTextareaInFirstDivActive && props.isPlaceHolderInFirstDivActive) {\r\n            return \"#9E9E9D\";\r\n        } else if (!props.isTextareaInFirstDivActive && props.isPlaceHolderInFirstDivActive) {\r\n            return \"#606469\";\r\n        } else if (props.isTextareaInFirstDivActive && !props.isPlaceHolderInFirstDivActive) {\r\n            return \"#000\";\r\n        }\r\n    }\r\n    // ------------ / Функция для определения цвета шрифта в первой текстареи ------------------------------\r\n\r\n\r\n    // ------------ Функция при вводе в третью текстарею символа -------------------------------------------\r\n    function onThirdTextareaChange(e) {             // При изменении в textArea в которой печатем note (третья текстареа)\r\n        let newText = e.target.innerText;           // Для удобства помести текст печатуемый в текстареи в переменную\r\n\r\n        if (props.isPlaceHolderInThirdDivActive) {              // если плейсхолдер активен \r\n            newText = e.target.innerText[0];                    // возьмем из полученного текста первую букву, в противном случае у нас будет текст заканчиваться плейсхолдером\r\n            setCaretToEnd(e.target);                            // переместим каретку в конец строки\r\n            changeNotePlaceHolder(\"\");                          // изменим значение плейсхолдера на пустую строку\r\n            props.toogleIsPlaceHolderInThirdDivActive(false);   // Изменим в стейте свойство показывающее активен ли плейсхолдер\r\n        } else {                                                // если плейсхолдер не активен\r\n            setCaretToEnd(e.target);                            // при печатании переместим каретку в конец строки\r\n        }\r\n\r\n        props.setTextInThirdDivInState(newText);                // изменим текст в стейте\r\n\r\n        if (e.target.offsetHeight > thirdTextAreaHeight) {             // если новая высота текстареи больше предыдущей\r\n            changeThirdTextAreaHeight(e.target.offsetHeight);          // изменим текущую высоту в стейте, чтобы это условие выполнялось потом при дальнейшем изменении высоты, если юзер продолжит печатать и добавлять стороки\r\n            changeTaskHeight(taskHeight + 40);\r\n        } else if (e.target.offsetHeight < thirdTextAreaHeight && e.target.offsetHeight != 0) {  // если новая высота текстареи меньше предыдущей и высота не равна 0 (будет тогда когда юзер сотрет все символы из строки)\r\n            changeThirdTextAreaHeight(e.target.offsetHeight);                                    // изменим текущую высоту в стейте, чтобы это условие выполнялось потом при дальнейшем изменении высоты, если юзер продолжит печатать и добавлять стороки\r\n            changeTaskHeight(taskHeight - 40);\r\n        }\r\n\r\n        if (newText === \"\" && props.isTextAreaInThirdDivActive) {               // если текст в текстареи === \"\"(юзер удалил все символы) и текстарея активна\r\n            changeNotePlaceHolder(placeHolderTextInThirdTextArea);              // изменим значение плейсхолдера на изначальное значение\r\n            props.toogleIsPlaceHolderInThirdDivActive(true);                    // Изменим в стейте свойство показывающее активен ли плейсхолдер\r\n            props.toogleIsTextAreaInThirdDivActive(false);                      // Изменим в стейте свойство показывающее активен ли текст в третьей тексареи\r\n            props.toogleIsTextAreaInSecondDivActive(false);                     // Изменим в стейте свойство показывающее активна ли вторая текстареа\r\n\r\n            let textInFirstDiv = props.textInFirstDiv + \"/\";                    // так как мы стерли первый слэш конкатенируем к тексту в первой текстареи один слеш\r\n            props.setTextInFirstDivInState(textInFirstDiv);                     // изменим текст в стейте\r\n            focusOnElement(\"task__first-textarea\", false);                      // сфокусируемся на первой текстареи\r\n        }\r\n    }\r\n    // ------------ / Функция при вводе в третью текстарею символа -----------------------------------------\r\n\r\n    return (\r\n        <HomePage\r\n            isTextareaInFirstDivActive={props.isTextareaInFirstDivActive}\r\n            isPlaceHolderInFirstDivActive={props.isPlaceHolderInFirstDivActive}\r\n            onFirstTextareaClick={onFirstTextareaClick}\r\n            onFirstTextareaChange={onFirstTextareaChange}\r\n            taskHeight={taskHeight}\r\n            firstTextAreaHeight={firstTextAreaHeight}\r\n            taskPlaceHolder={taskPlaceHolder}\r\n            textInFirstDiv={props.textInFirstDiv}\r\n            colorForFirstTextArea={colorForFirstTextArea}\r\n            isTextAreaInSecondDivActive={props.isTextAreaInSecondDivActive}\r\n            isTextAreaInThirdDivActive={props.isTextAreaInThirdDivActive}\r\n            isPlaceHolderInThirdDivActive={props.isPlaceHolderInThirdDivActive}\r\n            textInThirdDiv={props.textInThirdDiv}\r\n            notePlaceHolder={notePlaceHolder}\r\n            onThirdTextareaChange={onThirdTextareaChange}\r\n        />\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isTextareaInFirstDivActive: getIsTextAreaInFirstDivActiveSelector(state),\r\n        isPlaceHolderInFirstDivActive: getIsPlaceHolderInFirstDivActiveSelector(state),\r\n        textInFirstDiv: getTextInFirstDivSelector(state),\r\n        isTextAreaInSecondDivActive: getIsTextAreaInSecondDivActiveSelector(state),\r\n        isTextAreaInThirdDivActive: getIsTextAreaInThirdDivActiveSelector(state),\r\n        isPlaceHolderInThirdDivActive: getiIsPlaceHolderInThirdDivActiveSelector(state),\r\n        textInThirdDiv: getTextInThirdDivSelector(state)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    toogleIsTextAreaInFirstDivActive,\r\n    toogleIsPlaceHolderInFirstDivActive,\r\n    setTextInFirstDivInState,\r\n    toogleIsTextAreaInSecondDivActive,\r\n    toogleIsTextAreaInThirdDivActive,\r\n    toogleIsPlaceHolderInThirdDivActive,\r\n    setTextInThirdDivInState\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePageContainer);","import {\r\n    TOOGLE_IS_TEXTAREA_IN_FIRST_DIV_ACTIVE, IS_PLACEHOLDER_IN_FIRST_DIV_ACTIVE,\r\n    TEXT_IN_FIRST_DIV\r\n} from \"./actionTypes\";\r\n\r\n\r\n\r\nexport const toogleIsTextAreaInFirstDivActive = (boolVar) => ({ type: TOOGLE_IS_TEXTAREA_IN_FIRST_DIV_ACTIVE, isTextAreaInFirstDivActive: boolVar });\r\nexport const toogleIsPlaceHolderInFirstDivActive = (boolVar) => ({ type: IS_PLACEHOLDER_IN_FIRST_DIV_ACTIVE, isPlaceHolderInFirstDivActive: boolVar });\r\nexport const setTextInFirstDivInState = (textInFirstDiv) => ({ type: TEXT_IN_FIRST_DIV, textInFirstDiv });","import {\r\n    TOOGLE_IS_TEXTAREA_IN_SECOND_DIV_ACTIVE\r\n} from \"./actionTypes\";\r\n\r\n\r\n\r\nexport const toogleIsTextAreaInSecondDivActive = (boolVar) => ({ type: TOOGLE_IS_TEXTAREA_IN_SECOND_DIV_ACTIVE, isTextAreaInSecondDivActive: boolVar });","import {\r\n    TOOGLE_IS_TEXTAREA_IN_THIRD_DIV_ACTIVE, IS_PLACEHOLDER_IN_THIRD_DIV_ACTIVE,\r\n    TEXT_IN_THIRD_DIV\r\n} from \"./actionTypes\";\r\n\r\n\r\n\r\nexport const toogleIsTextAreaInThirdDivActive = (boolVar) => ({ type: TOOGLE_IS_TEXTAREA_IN_THIRD_DIV_ACTIVE, isTextAreaInThirdDivActive: boolVar });\r\nexport const toogleIsPlaceHolderInThirdDivActive = (boolVar) => ({ type: IS_PLACEHOLDER_IN_THIRD_DIV_ACTIVE, isPlaceHolderInThirdDivActive: boolVar });\r\nexport const setTextInThirdDivInState = (textInThirdDiv) => ({ type: TEXT_IN_THIRD_DIV, textInThirdDiv });","import React from \"react\";\r\n\r\nconst NotFoundPage = () => {\r\n    return (\r\n        <h2>Page Not Found</h2>\r\n    );\r\n}\r\n\r\nexport default NotFoundPage;","import './App.css';\nimport { Route, Switch } from \"react-router-dom\";\nimport HomePageContainer from \"./UI/HomePage/HomePageContainer\";\nimport NotFoundPage from './UI/NotFoundPage/NotFoundPage';\n\nconst App = () => {\n  return (\n    <>\n      <Switch>\n        <Route exact path='/' render={() => <HomePageContainer />} />\n        <Route path='*' render={() => <NotFoundPage />} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    TOOGLE_IS_TEXTAREA_IN_FIRST_DIV_ACTIVE, IS_PLACEHOLDER_IN_FIRST_DIV_ACTIVE,\r\n    TEXT_IN_FIRST_DIV\r\n} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n    isTextAreaInFirstDivActive: false,\r\n    isPlaceHolderInFirstDivActive: true,\r\n    textInFirstDiv: \"\"\r\n};\r\n\r\nconst textAreaInFirstDivReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TOOGLE_IS_TEXTAREA_IN_FIRST_DIV_ACTIVE: {\r\n            const superState = {\r\n                ...state,\r\n                isTextAreaInFirstDivActive: action.isTextAreaInFirstDivActive\r\n            };\r\n            return superState;\r\n        }\r\n\r\n        case IS_PLACEHOLDER_IN_FIRST_DIV_ACTIVE: {\r\n            const superState = {\r\n                ...state,\r\n                isPlaceHolderInFirstDivActive: action.isPlaceHolderInFirstDivActive\r\n            };\r\n            return superState;\r\n        }\r\n\r\n        case TEXT_IN_FIRST_DIV: {\r\n            const superState = {\r\n                ...state,\r\n                textInFirstDiv: action.textInFirstDiv\r\n            };\r\n            return superState;\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default textAreaInFirstDivReducer;","import {\r\n    TOOGLE_IS_TEXTAREA_IN_SECOND_DIV_ACTIVE\r\n} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n    isTextAreaInSecondDivActive: false\r\n};\r\n\r\nconst textAreaInSecondDivReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TOOGLE_IS_TEXTAREA_IN_SECOND_DIV_ACTIVE: {\r\n            const superState = {\r\n                ...state,\r\n                isTextAreaInSecondDivActive: action.isTextAreaInSecondDivActive\r\n            };\r\n            return superState;\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default textAreaInSecondDivReducer;","import {\r\n    TOOGLE_IS_TEXTAREA_IN_THIRD_DIV_ACTIVE, IS_PLACEHOLDER_IN_THIRD_DIV_ACTIVE,\r\n    TEXT_IN_THIRD_DIV\r\n} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n    isTextAreaInThirdDivActive: false,\r\n    isPlaceHolderInThirdDivActive: true,\r\n    textInThirdDiv: \"\"\r\n};\r\n\r\nconst textAreaInThirdDivReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TOOGLE_IS_TEXTAREA_IN_THIRD_DIV_ACTIVE: {\r\n            const superState = {\r\n                ...state,\r\n                isTextAreaInThirdDivActive: action.isTextAreaInThirdDivActive\r\n            };\r\n            return superState;\r\n        }\r\n\r\n        case IS_PLACEHOLDER_IN_THIRD_DIV_ACTIVE: {\r\n            const superState = {\r\n                ...state,\r\n                isPlaceHolderInThirdDivActive: action.isPlaceHolderInThirdDivActive\r\n            };\r\n            return superState;\r\n        }\r\n\r\n        case TEXT_IN_THIRD_DIV: {\r\n            const superState = {\r\n                ...state,\r\n                textInThirdDiv: action.textInThirdDiv\r\n            };\r\n            return superState;\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default textAreaInThirdDivReducer;","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport { compose } from \"redux\";\r\nimport textAreaInFirstDivReducer from \"../firstTextArea/reducer\";\r\nimport textAreaInSecondDivReducer from \"../secondTextArea/reducer\";\r\nimport textAreaInThirdDivReducer from \"../thirdTextArea/reducer\";\r\n\r\nlet reducers = combineReducers({\r\n  textAreaInFirstDiv: textAreaInFirstDivReducer,\r\n  textAreaInSecondDiv: textAreaInSecondDivReducer,\r\n  textAreaInThirdDiv: textAreaInThirdDivReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, /* preloadedState, */ composeEnhancers(\r\n    applyMiddleware(thunkMiddleWare)\r\n  ));                                       // это для использования extension'а redux dev tools в Google Chrome\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './BLL/redux_store/redux-store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}